/* automatically generated by rust-bindgen 0.61.0 */

pub const filterSelectorAbout: u32 = 0;
pub const filterSelectorParameters: u32 = 1;
pub const filterSelectorPrepare: u32 = 2;
pub const filterSelectorStart: u32 = 3;
pub const filterSelectorContinue: u32 = 4;
pub const filterSelectorFinish: u32 = 5;
pub const filterCaseUnsupported: i32 = -1;
pub const filterCaseFlatImageNoSelection: u32 = 1;
pub const filterCaseFlatImageWithSelection: u32 = 2;
pub const filterCaseFloatingSelection: u32 = 3;
pub const filterCaseEditableTransparencyNoSelection: u32 = 4;
pub const filterCaseEditableTransparencyWithSelection: u32 = 5;
pub const filterCaseProtectedTransparencyNoSelection: u32 = 6;
pub const filterCaseProtectedTransparencyWithSelection: u32 = 7;
pub const filterDataHandlingCantFilter: u32 = 0;
pub const filterDataHandlingNone: u32 = 1;
pub const filterDataHandlingBlackMat: u32 = 2;
pub const filterDataHandlingGrayMat: u32 = 3;
pub const filterDataHandlingWhiteMat: u32 = 4;
pub const filterDataHandlingDefringe: u32 = 5;
pub const filterDataHandlingBlackZap: u32 = 6;
pub const filterDataHandlingGrayZap: u32 = 7;
pub const filterDataHandlingWhiteZap: u32 = 8;
pub const filterDataHandlingFillMask: u32 = 9;
pub const filterDataHandlingBackgroundZap: u32 = 10;
pub const filterDataHandlingForegroundZap: u32 = 11;
pub const PIFilterDontCopyToDestinationBit: u32 = 0;
pub const PIFilterWorksWithBlankDataBit: u32 = 1;
pub const PIFilterFiltersLayerMaskBit: u32 = 2;
pub const PIFilterWritesOutsideSelectionBit: u32 = 3;
pub const PIFilterCaseInfoProperty: u32 = 1718182761;
pub const filterBadParameters: i32 = -30100;
pub const filterBadMode: i32 = -30101;
pub type int16 = i16;
pub type int32 = i32;
pub type int64 = i64;
pub type uint16 = u16;
pub type uint32 = u32;
pub type unsigned8 = u8;
pub type unsigned32 = u32;
pub type real64 = f64;
pub type SPUInt32 = uint32;
pub type SPBoolean = int32;
pub type SPErr = int32;
pub type BYTE = ::std::os::raw::c_uchar;
pub type CHAR = ::std::os::raw::c_char;
pub type LPSTR = *mut CHAR;
pub type Fixed = int32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Point {
    pub v: int16,
    pub h: int16,
}
#[test]
fn bindgen_test_layout_Point() {
    const UNINIT: ::std::mem::MaybeUninit<Point> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Point>(),
        4usize,
        concat!("Size of: ", stringify!(Point))
    );
    assert_eq!(
        ::std::mem::align_of::<Point>(),
        2usize,
        concat!("Alignment of ", stringify!(Point))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        2usize,
        concat!("Offset of field: ", stringify!(Point), "::", stringify!(h))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rect {
    pub top: int16,
    pub left: int16,
    pub bottom: int16,
    pub right: int16,
}
#[test]
fn bindgen_test_layout_Rect() {
    const UNINIT: ::std::mem::MaybeUninit<Rect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Rect>(),
        8usize,
        concat!("Size of: ", stringify!(Rect))
    );
    assert_eq!(
        ::std::mem::align_of::<Rect>(),
        2usize,
        concat!("Alignment of ", stringify!(Rect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Rect), "::", stringify!(top))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(Rect),
            "::",
            stringify!(right)
        )
    );
}
pub type Ptr = LPSTR;
pub type Handle = *mut LPSTR;
pub type Boolean = BYTE;
pub type OSType = uint32;
pub type OSErr = int16;
pub type ResType = uint32;
pub type Str255 = [::std::os::raw::c_uchar; 256usize];
pub type ConstStr255Param = *const ::std::os::raw::c_uchar;
pub type PILookUpTable = [unsigned8; 256usize];
pub type LookUpTable = PILookUpTable;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VRect {
    pub top: int32,
    pub left: int32,
    pub bottom: int32,
    pub right: int32,
}
#[test]
fn bindgen_test_layout_VRect() {
    const UNINIT: ::std::mem::MaybeUninit<VRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VRect>(),
        16usize,
        concat!("Size of: ", stringify!(VRect))
    );
    assert_eq!(
        ::std::mem::align_of::<VRect>(),
        4usize,
        concat!("Alignment of ", stringify!(VRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(VRect),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(VRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(VRect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(VRect),
            "::",
            stringify!(right)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VPoint {
    pub v: int32,
    pub h: int32,
}
#[test]
fn bindgen_test_layout_VPoint() {
    const UNINIT: ::std::mem::MaybeUninit<VPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<VPoint>(),
        8usize,
        concat!("Size of: ", stringify!(VPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<VPoint>(),
        4usize,
        concat!("Alignment of ", stringify!(VPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(VPoint), "::", stringify!(v))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(VPoint), "::", stringify!(h))
    );
}
pub type PIType = SPUInt32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct XPlatFileSpec {
    pub mFileSpecVersion: int32,
    pub mFileReference: *mut uint16,
}
#[test]
fn bindgen_test_layout_XPlatFileSpec() {
    const UNINIT: ::std::mem::MaybeUninit<XPlatFileSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<XPlatFileSpec>(),
        16usize,
        concat!("Size of: ", stringify!(XPlatFileSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<XPlatFileSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(XPlatFileSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mFileSpecVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(XPlatFileSpec),
            "::",
            stringify!(mFileSpecVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mFileReference) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(XPlatFileSpec),
            "::",
            stringify!(mFileReference)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPPlatformFileSpecificationW {
    pub mReference: *mut uint16,
}
#[test]
fn bindgen_test_layout_SPPlatformFileSpecificationW() {
    const UNINIT: ::std::mem::MaybeUninit<SPPlatformFileSpecificationW> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SPPlatformFileSpecificationW>(),
        8usize,
        concat!("Size of: ", stringify!(SPPlatformFileSpecificationW))
    );
    assert_eq!(
        ::std::mem::align_of::<SPPlatformFileSpecificationW>(),
        8usize,
        concat!("Alignment of ", stringify!(SPPlatformFileSpecificationW))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mReference) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPPlatformFileSpecificationW),
            "::",
            stringify!(mReference)
        )
    );
}
pub type PIDescriptorHandle = Handle;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIOpaqueWriteDescriptor {
    _unused: [u8; 0],
}
pub type PIWriteDescriptor = *mut PIOpaqueWriteDescriptor;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIOpaqueReadDescriptor {
    _unused: [u8; 0],
}
pub type PIReadDescriptor = *mut PIOpaqueReadDescriptor;
pub type DescriptorKeyID = uint32;
pub type DescriptorTypeID = uint32;
pub type DescriptorUnitID = uint32;
pub type DescriptorEnumID = uint32;
pub type DescriptorKeyIDArray = [DescriptorKeyID; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIDescriptorSimpleReference {
    pub desiredClass: DescriptorTypeID,
    pub keyForm: DescriptorKeyID,
    pub keyData: PIDescriptorSimpleReference__keyData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIDescriptorSimpleReference__keyData {
    pub name: Str255,
    pub index: int32,
    pub type_: DescriptorTypeID,
    pub value: DescriptorEnumID,
}
#[test]
fn bindgen_test_layout_PIDescriptorSimpleReference__keyData() {
    const UNINIT: ::std::mem::MaybeUninit<PIDescriptorSimpleReference__keyData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PIDescriptorSimpleReference__keyData>(),
        268usize,
        concat!(
            "Size of: ",
            stringify!(PIDescriptorSimpleReference__keyData)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<PIDescriptorSimpleReference__keyData>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(PIDescriptorSimpleReference__keyData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference__keyData),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference__keyData),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference__keyData),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference__keyData),
            "::",
            stringify!(value)
        )
    );
}
#[test]
fn bindgen_test_layout_PIDescriptorSimpleReference() {
    const UNINIT: ::std::mem::MaybeUninit<PIDescriptorSimpleReference> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PIDescriptorSimpleReference>(),
        276usize,
        concat!("Size of: ", stringify!(PIDescriptorSimpleReference))
    );
    assert_eq!(
        ::std::mem::align_of::<PIDescriptorSimpleReference>(),
        4usize,
        concat!("Alignment of ", stringify!(PIDescriptorSimpleReference))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).desiredClass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference),
            "::",
            stringify!(desiredClass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyForm) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference),
            "::",
            stringify!(keyForm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keyData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorSimpleReference),
            "::",
            stringify!(keyData)
        )
    );
}
pub type OpenWriteDescriptorProc =
    ::std::option::Option<unsafe extern "C" fn() -> PIWriteDescriptor>;
pub type CloseWriteDescriptorProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: *mut PIDescriptorHandle) -> OSErr,
>;
pub type PutIntegerProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: DescriptorKeyID, arg3: int32) -> OSErr,
>;
pub type PutFloatProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: *const real64,
    ) -> OSErr,
>;
pub type PutUnitFloatProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: DescriptorUnitID,
        arg4: *const real64,
    ) -> OSErr,
>;
pub type PutBooleanProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: DescriptorKeyID, arg3: Boolean) -> OSErr,
>;
pub type PutTextProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: DescriptorKeyID, arg3: Handle) -> OSErr,
>;
pub type PutAliasProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: DescriptorKeyID, arg3: Handle) -> OSErr,
>;
pub type PutEnumeratedProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        key: DescriptorKeyID,
        type_: DescriptorTypeID,
        value: DescriptorEnumID,
    ) -> OSErr,
>;
pub type PutClassProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: DescriptorTypeID,
    ) -> OSErr,
>;
pub type PutSimpleReferenceProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: *const PIDescriptorSimpleReference,
    ) -> OSErr,
>;
pub type PutObjectProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: DescriptorTypeID,
        arg4: PIDescriptorHandle,
    ) -> OSErr,
>;
pub type PutCountProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIWriteDescriptor, arg2: DescriptorKeyID, count: uint32) -> OSErr,
>;
pub type PutStringProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: ConstStr255Param,
    ) -> OSErr,
>;
pub type PutScopedClassProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: DescriptorTypeID,
    ) -> OSErr,
>;
pub type PutScopedObjectProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIWriteDescriptor,
        arg2: DescriptorKeyID,
        arg3: DescriptorTypeID,
        arg4: PIDescriptorHandle,
    ) -> OSErr,
>;
pub type OpenReadDescriptorProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIDescriptorHandle, arg2: *mut DescriptorKeyID) -> PIReadDescriptor,
>;
pub type CloseReadDescriptorProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor) -> OSErr>;
pub type GetKeyProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIReadDescriptor,
        key: *mut DescriptorKeyID,
        type_: *mut DescriptorTypeID,
        flags: *mut int32,
    ) -> Boolean,
>;
pub type GetIntegerProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut int32) -> OSErr>;
pub type GetFloatProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut real64) -> OSErr>;
pub type GetUnitFloatProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIReadDescriptor,
        arg2: *mut DescriptorUnitID,
        arg3: *mut real64,
    ) -> OSErr,
>;
pub type GetBooleanProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut Boolean) -> OSErr,
>;
pub type GetTextProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut Handle) -> OSErr>;
pub type GetAliasProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut Handle) -> OSErr>;
pub type GetEnumeratedProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut DescriptorEnumID) -> OSErr,
>;
pub type GetClassProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut DescriptorTypeID) -> OSErr,
>;
pub type GetSimpleReferenceProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut PIDescriptorSimpleReference) -> OSErr,
>;
pub type GetObjectProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIReadDescriptor,
        arg2: *mut DescriptorTypeID,
        arg3: *mut PIDescriptorHandle,
    ) -> OSErr,
>;
pub type GetCountProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut uint32) -> OSErr>;
pub type GetStringProc =
    ::std::option::Option<unsafe extern "C" fn(arg1: PIReadDescriptor, arg2: *mut Str255) -> OSErr>;
pub type GetPinnedIntegerProc = ::std::option::Option<
    unsafe extern "C" fn(arg1: PIReadDescriptor, min: int32, max: int32, arg2: *mut int32) -> OSErr,
>;
pub type GetPinnedFloatProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIReadDescriptor,
        min: *const real64,
        max: *const real64,
        arg2: *mut real64,
    ) -> OSErr,
>;
pub type GetPinnedUnitFloatProc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: PIReadDescriptor,
        min: *const real64,
        max: *const real64,
        arg2: *mut DescriptorUnitID,
        arg3: *mut real64,
    ) -> OSErr,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteDescriptorProcs {
    pub writeDescriptorProcsVersion: int16,
    pub numWriteDescriptorProcs: int16,
    pub openWriteDescriptorProc: OpenWriteDescriptorProc,
    pub closeWriteDescriptorProc: CloseWriteDescriptorProc,
    pub putIntegerProc: PutIntegerProc,
    pub putFloatProc: PutFloatProc,
    pub putUnitFloatProc: PutUnitFloatProc,
    pub putBooleanProc: PutBooleanProc,
    pub putTextProc: PutTextProc,
    pub putAliasProc: PutAliasProc,
    pub putEnumeratedProc: PutEnumeratedProc,
    pub putClassProc: PutClassProc,
    pub putSimpleReferenceProc: PutSimpleReferenceProc,
    pub putObjectProc: PutObjectProc,
    pub putCountProc: PutCountProc,
    pub putStringProc: PutStringProc,
    pub putScopedClassProc: PutScopedClassProc,
    pub putScopedObjectProc: PutScopedObjectProc,
}
#[test]
fn bindgen_test_layout_WriteDescriptorProcs() {
    const UNINIT: ::std::mem::MaybeUninit<WriteDescriptorProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<WriteDescriptorProcs>(),
        136usize,
        concat!("Size of: ", stringify!(WriteDescriptorProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<WriteDescriptorProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(WriteDescriptorProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeDescriptorProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(writeDescriptorProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numWriteDescriptorProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(numWriteDescriptorProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openWriteDescriptorProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(openWriteDescriptorProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closeWriteDescriptorProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(closeWriteDescriptorProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putIntegerProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putIntegerProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putFloatProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putFloatProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putUnitFloatProc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putUnitFloatProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putBooleanProc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putBooleanProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putTextProc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putTextProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putAliasProc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putAliasProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putEnumeratedProc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putEnumeratedProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putClassProc) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putClassProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putSimpleReferenceProc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putSimpleReferenceProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putObjectProc) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putObjectProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putCountProc) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putCountProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putStringProc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putStringProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putScopedClassProc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putScopedClassProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).putScopedObjectProc) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WriteDescriptorProcs),
            "::",
            stringify!(putScopedObjectProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadDescriptorProcs {
    pub readDescriptorProcsVersion: int16,
    pub numReadDescriptorProcs: int16,
    pub openReadDescriptorProc: OpenReadDescriptorProc,
    pub closeReadDescriptorProc: CloseReadDescriptorProc,
    pub getKeyProc: GetKeyProc,
    pub getIntegerProc: GetIntegerProc,
    pub getFloatProc: GetFloatProc,
    pub getUnitFloatProc: GetUnitFloatProc,
    pub getBooleanProc: GetBooleanProc,
    pub getTextProc: GetTextProc,
    pub getAliasProc: GetAliasProc,
    pub getEnumeratedProc: GetEnumeratedProc,
    pub getClassProc: GetClassProc,
    pub getSimpleReferenceProc: GetSimpleReferenceProc,
    pub getObjectProc: GetObjectProc,
    pub getCountProc: GetCountProc,
    pub getStringProc: GetStringProc,
    pub getPinnedIntegerProc: GetPinnedIntegerProc,
    pub getPinnedFloatProc: GetPinnedFloatProc,
    pub getPinnedUnitFloatProc: GetPinnedUnitFloatProc,
}
#[test]
fn bindgen_test_layout_ReadDescriptorProcs() {
    const UNINIT: ::std::mem::MaybeUninit<ReadDescriptorProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ReadDescriptorProcs>(),
        152usize,
        concat!("Size of: ", stringify!(ReadDescriptorProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadDescriptorProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadDescriptorProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readDescriptorProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(readDescriptorProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numReadDescriptorProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(numReadDescriptorProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openReadDescriptorProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(openReadDescriptorProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).closeReadDescriptorProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(closeReadDescriptorProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getKeyProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getKeyProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getIntegerProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getIntegerProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getFloatProc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getFloatProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getUnitFloatProc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getUnitFloatProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getBooleanProc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getBooleanProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getTextProc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getTextProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getAliasProc) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getAliasProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getEnumeratedProc) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getEnumeratedProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getClassProc) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getClassProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSimpleReferenceProc) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getSimpleReferenceProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getObjectProc) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getObjectProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getCountProc) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getCountProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getStringProc) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getStringProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPinnedIntegerProc) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getPinnedIntegerProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPinnedFloatProc) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getPinnedFloatProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPinnedUnitFloatProc) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadDescriptorProcs),
            "::",
            stringify!(getPinnedUnitFloatProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PIDescriptorParameters {
    pub descriptorParametersVersion: int16,
    pub playInfo: int16,
    pub recordInfo: int16,
    pub descriptor: PIDescriptorHandle,
    pub writeDescriptorProcs: *mut WriteDescriptorProcs,
    pub readDescriptorProcs: *mut ReadDescriptorProcs,
}
#[test]
fn bindgen_test_layout_PIDescriptorParameters() {
    const UNINIT: ::std::mem::MaybeUninit<PIDescriptorParameters> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PIDescriptorParameters>(),
        32usize,
        concat!("Size of: ", stringify!(PIDescriptorParameters))
    );
    assert_eq!(
        ::std::mem::align_of::<PIDescriptorParameters>(),
        8usize,
        concat!("Alignment of ", stringify!(PIDescriptorParameters))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorParametersVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(descriptorParametersVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).playInfo) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(playInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recordInfo) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(recordInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptor) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(descriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeDescriptorProcs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(writeDescriptorProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readDescriptorProcs) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PIDescriptorParameters),
            "::",
            stringify!(readDescriptorProcs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSBuffer {
    _unused: [u8; 0],
}
pub type BufferID = *mut PSBuffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PlugInMonitor {
    pub gamma: Fixed,
    pub redX: Fixed,
    pub redY: Fixed,
    pub greenX: Fixed,
    pub greenY: Fixed,
    pub blueX: Fixed,
    pub blueY: Fixed,
    pub whiteX: Fixed,
    pub whiteY: Fixed,
    pub ambient: Fixed,
}
#[test]
fn bindgen_test_layout_PlugInMonitor() {
    const UNINIT: ::std::mem::MaybeUninit<PlugInMonitor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PlugInMonitor>(),
        40usize,
        concat!("Size of: ", stringify!(PlugInMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<PlugInMonitor>(),
        4usize,
        concat!("Alignment of ", stringify!(PlugInMonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gamma) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(gamma)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redX) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(redX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redY) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(redY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greenX) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(greenX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greenY) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(greenY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blueX) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(blueX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blueY) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(blueY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whiteX) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(whiteX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).whiteY) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(whiteY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ambient) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(PlugInMonitor),
            "::",
            stringify!(ambient)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSPixelMask {
    pub next: *mut PSPixelMask,
    pub maskData: *mut ::std::os::raw::c_void,
    pub rowBytes: int32,
    pub colBytes: int32,
    pub maskDescription: int32,
}
#[test]
fn bindgen_test_layout_PSPixelMask() {
    const UNINIT: ::std::mem::MaybeUninit<PSPixelMask> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSPixelMask>(),
        32usize,
        concat!("Size of: ", stringify!(PSPixelMask))
    );
    assert_eq!(
        ::std::mem::align_of::<PSPixelMask>(),
        8usize,
        concat!("Alignment of ", stringify!(PSPixelMask))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMask),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMask),
            "::",
            stringify!(maskData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMask),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMask),
            "::",
            stringify!(colBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskDescription) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMask),
            "::",
            stringify!(maskDescription)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSPixelOverlay {
    pub next: *mut PSPixelOverlay,
    pub data: *mut ::std::os::raw::c_void,
    pub rowBytes: int32,
    pub colBytes: int32,
    pub r: unsigned8,
    pub g: unsigned8,
    pub b: unsigned8,
    pub opacity: unsigned8,
    pub overlayAlgorithm: int32,
}
#[test]
fn bindgen_test_layout_PSPixelOverlay() {
    const UNINIT: ::std::mem::MaybeUninit<PSPixelOverlay> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSPixelOverlay>(),
        32usize,
        concat!("Size of: ", stringify!(PSPixelOverlay))
    );
    assert_eq!(
        ::std::mem::align_of::<PSPixelOverlay>(),
        8usize,
        concat!("Alignment of ", stringify!(PSPixelOverlay))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(colBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacity) as usize - ptr as usize },
        27usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).overlayAlgorithm) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelOverlay),
            "::",
            stringify!(overlayAlgorithm)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSPixelMap {
    pub version: int32,
    pub bounds: VRect,
    pub imageMode: int32,
    pub rowBytes: int32,
    pub colBytes: int32,
    pub planeBytes: int32,
    pub baseAddr: *mut ::std::os::raw::c_void,
    pub mat: *mut PSPixelMask,
    pub masks: *mut PSPixelMask,
    pub maskPhaseRow: int32,
    pub maskPhaseCol: int32,
    pub pixelOverlays: *mut PSPixelOverlay,
    pub colorManagementOptions: unsigned32,
    pub depth: int16,
}
#[test]
fn bindgen_test_layout_PSPixelMap() {
    const UNINIT: ::std::mem::MaybeUninit<PSPixelMap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSPixelMap>(),
        88usize,
        concat!("Size of: ", stringify!(PSPixelMap))
    );
    assert_eq!(
        ::std::mem::align_of::<PSPixelMap>(),
        8usize,
        concat!("Alignment of ", stringify!(PSPixelMap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMode) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(imageMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(colBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planeBytes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(planeBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseAddr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(baseAddr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mat) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(mat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).masks) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(masks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskPhaseRow) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(maskPhaseRow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskPhaseCol) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(maskPhaseCol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pixelOverlays) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(pixelOverlays)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorManagementOptions) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(colorManagementOptions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(PSPixelMap),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ColorServicesInfo {
    pub infoSize: int32,
    pub selector: int16,
    pub sourceSpace: int16,
    pub resultSpace: int16,
    pub resultGamutInfoValid: Boolean,
    pub resultInGamut: Boolean,
    pub reservedSourceSpaceInfo: *mut ::std::os::raw::c_void,
    pub reservedResultSpaceInfo: *mut ::std::os::raw::c_void,
    pub colorComponents: [int16; 4usize],
    pub reserved: *mut ::std::os::raw::c_void,
    pub selectorParameter: ColorServicesInfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ColorServicesInfo__bindgen_ty_1 {
    pub pickerPrompt: *mut Str255,
    pub globalSamplePoint: *mut Point,
    pub specialColorID: int32,
}
#[test]
fn bindgen_test_layout_ColorServicesInfo__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ColorServicesInfo__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ColorServicesInfo__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(ColorServicesInfo__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ColorServicesInfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ColorServicesInfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pickerPrompt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo__bindgen_ty_1),
            "::",
            stringify!(pickerPrompt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).globalSamplePoint) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo__bindgen_ty_1),
            "::",
            stringify!(globalSamplePoint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).specialColorID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo__bindgen_ty_1),
            "::",
            stringify!(specialColorID)
        )
    );
}
#[test]
fn bindgen_test_layout_ColorServicesInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ColorServicesInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ColorServicesInfo>(),
        56usize,
        concat!("Size of: ", stringify!(ColorServicesInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ColorServicesInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ColorServicesInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).infoSize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(infoSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selector) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(selector)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceSpace) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(sourceSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultSpace) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(resultSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultGamutInfoValid) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(resultGamutInfoValid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resultInGamut) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(resultInGamut)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservedSourceSpaceInfo) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(reservedSourceSpaceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservedResultSpaceInfo) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(reservedResultSpaceInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorComponents) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(colorComponents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selectorParameter) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorServicesInfo),
            "::",
            stringify!(selectorParameter)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSImagePlane {
    pub data: *mut ::std::os::raw::c_void,
    pub bounds: Rect,
    pub rowBytes: int32,
    pub colBytes: int32,
}
#[test]
fn bindgen_test_layout_PSImagePlane() {
    const UNINIT: ::std::mem::MaybeUninit<PSImagePlane> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSImagePlane>(),
        24usize,
        concat!("Size of: ", stringify!(PSImagePlane))
    );
    assert_eq!(
        ::std::mem::align_of::<PSImagePlane>(),
        8usize,
        concat!("Alignment of ", stringify!(PSImagePlane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImagePlane),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImagePlane),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImagePlane),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImagePlane),
            "::",
            stringify!(colBytes)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSImageMultiPlane {
    pub data: *mut ::std::os::raw::c_void,
    pub bounds: Rect,
    pub rowBytes: int32,
    pub colBytes: int32,
    pub activeChannels: int16,
}
#[test]
fn bindgen_test_layout_PSImageMultiPlane() {
    const UNINIT: ::std::mem::MaybeUninit<PSImageMultiPlane> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSImageMultiPlane>(),
        32usize,
        concat!("Size of: ", stringify!(PSImageMultiPlane))
    );
    assert_eq!(
        ::std::mem::align_of::<PSImageMultiPlane>(),
        8usize,
        concat!("Alignment of ", stringify!(PSImageMultiPlane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane),
            "::",
            stringify!(colBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeChannels) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane),
            "::",
            stringify!(activeChannels)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSImageMultiPlane32 {
    pub data: *mut ::std::os::raw::c_void,
    pub bounds: VRect,
    pub rowBytes: int32,
    pub colBytes: int32,
    pub activeChannels: int16,
    pub depth: int16,
}
#[test]
fn bindgen_test_layout_PSImageMultiPlane32() {
    const UNINIT: ::std::mem::MaybeUninit<PSImageMultiPlane32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSImageMultiPlane32>(),
        40usize,
        concat!("Size of: ", stringify!(PSImageMultiPlane32))
    );
    assert_eq!(
        ::std::mem::align_of::<PSImageMultiPlane32>(),
        8usize,
        concat!("Alignment of ", stringify!(PSImageMultiPlane32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBytes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(rowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBytes) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(colBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).activeChannels) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(activeChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(PSImageMultiPlane32),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PixelMemoryDesc {
    pub data: *mut ::std::os::raw::c_void,
    pub rowBits: int32,
    pub colBits: int32,
    pub bitOffset: int32,
    pub depth: int32,
}
#[test]
fn bindgen_test_layout_PixelMemoryDesc() {
    const UNINIT: ::std::mem::MaybeUninit<PixelMemoryDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PixelMemoryDesc>(),
        24usize,
        concat!("Size of: ", stringify!(PixelMemoryDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<PixelMemoryDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(PixelMemoryDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PixelMemoryDesc),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rowBits) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PixelMemoryDesc),
            "::",
            stringify!(rowBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colBits) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PixelMemoryDesc),
            "::",
            stringify!(colBits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bitOffset) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PixelMemoryDesc),
            "::",
            stringify!(bitOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(PixelMemoryDesc),
            "::",
            stringify!(depth)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSScaling {
    pub sourceRect: VRect,
    pub destinationRect: VRect,
}
#[test]
fn bindgen_test_layout_PSScaling() {
    const UNINIT: ::std::mem::MaybeUninit<PSScaling> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSScaling>(),
        32usize,
        concat!("Size of: ", stringify!(PSScaling))
    );
    assert_eq!(
        ::std::mem::align_of::<PSScaling>(),
        4usize,
        concat!("Alignment of ", stringify!(PSScaling))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceRect) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSScaling),
            "::",
            stringify!(sourceRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destinationRect) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PSScaling),
            "::",
            stringify!(destinationRect)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PIChannelPortDesc {
    _unused: [u8; 0],
}
pub type PIChannelPort = *mut _PIChannelPortDesc;
pub type ChannelReadPort = PIChannelPort;
pub type ChannelWritePort = PIChannelPort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadChannelDesc {
    pub minVersion: int32,
    pub maxVersion: int32,
    pub next: *mut ReadChannelDesc,
    pub port: PIChannelPort,
    pub bounds: VRect,
    pub depth: int32,
    pub tileSize: VPoint,
    pub tileOrigin: VPoint,
    pub target: Boolean,
    pub shown: Boolean,
    pub channelType: int16,
    pub contextInfo: *mut ::std::os::raw::c_void,
    pub name: *const ::std::os::raw::c_char,
    pub writePort: PIChannelPort,
    pub alphaID: unsigned32,
    pub unicodeName: *const uint16,
    pub isEnabled: Boolean,
    pub limitBounds: VRect,
}
#[test]
fn bindgen_test_layout_ReadChannelDesc() {
    const UNINIT: ::std::mem::MaybeUninit<ReadChannelDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ReadChannelDesc>(),
        128usize,
        concat!("Size of: ", stringify!(ReadChannelDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadChannelDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadChannelDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(minVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(maxVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).port) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tileSize) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(tileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tileOrigin) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(tileOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).target) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).shown) as usize - ptr as usize },
        61usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(shown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelType) as usize - ptr as usize },
        62usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(channelType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contextInfo) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(contextInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writePort) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(writePort)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaID) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(alphaID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicodeName) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(unicodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isEnabled) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(isEnabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).limitBounds) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadChannelDesc),
            "::",
            stringify!(limitBounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadLayerDesc {
    pub minVersion: int32,
    pub maxVersion: int32,
    pub next: *mut ReadLayerDesc,
    pub compositeChannelsList: *mut ReadChannelDesc,
    pub transparency: *mut ReadChannelDesc,
    pub layerMask: *mut ReadChannelDesc,
    pub sheetID: unsigned32,
    pub name: *const ::std::os::raw::c_char,
    pub isPixelBased: Boolean,
    pub unicodeName: *const uint16,
    pub isVisible: Boolean,
    pub isAdjustor: Boolean,
    pub isContentGenerator: Boolean,
    pub isRendered: Boolean,
    pub opacity: unsigned8,
    pub fillOpacity: unsigned8,
    pub blendMode: PIType,
    pub vectorMask: *mut ReadChannelDesc,
    pub smartFilterMask: *mut ReadChannelDesc,
}
#[test]
fn bindgen_test_layout_ReadLayerDesc() {
    const UNINIT: ::std::mem::MaybeUninit<ReadLayerDesc> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ReadLayerDesc>(),
        104usize,
        concat!("Size of: ", stringify!(ReadLayerDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadLayerDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadLayerDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(minVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(maxVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compositeChannelsList) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(compositeChannelsList)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).transparency) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(transparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerMask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(layerMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sheetID) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(sheetID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isPixelBased) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(isPixelBased)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unicodeName) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(unicodeName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isVisible) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(isVisible)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isAdjustor) as usize - ptr as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(isAdjustor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isContentGenerator) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(isContentGenerator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isRendered) as usize - ptr as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(isRendered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opacity) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(opacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fillOpacity) as usize - ptr as usize },
        77usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(fillOpacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blendMode) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(blendMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vectorMask) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(vectorMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).smartFilterMask) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadLayerDesc),
            "::",
            stringify!(smartFilterMask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ReadImageDocumentDesc {
    pub minVersion: int32,
    pub maxVersion: int32,
    pub imageMode: int32,
    pub depth: int32,
    pub bounds: VRect,
    pub hResolution: Fixed,
    pub vResolution: Fixed,
    pub redLUT: LookUpTable,
    pub greenLUT: LookUpTable,
    pub blueLUT: LookUpTable,
    pub targetCompositeChannels: *mut ReadChannelDesc,
    pub targetTransparency: *mut ReadChannelDesc,
    pub targetLayerMask: *mut ReadChannelDesc,
    pub mergedCompositeChannels: *mut ReadChannelDesc,
    pub mergedTransparency: *mut ReadChannelDesc,
    pub alphaChannels: *mut ReadChannelDesc,
    pub selection: *mut ReadChannelDesc,
    pub fileSpec: *mut SPPlatformFileSpecification_t,
    pub layersDescriptor: *mut ReadLayerDesc,
    pub documentType: int32,
    pub next: *mut ReadImageDocumentDesc,
    pub iCCprofileData: *mut ::std::os::raw::c_void,
    pub iCCprofileSize: int32,
    pub compositeChannelCount: int32,
    pub layerCount: int32,
    pub alphaChannelCount: int32,
    pub targetSmartFilterMask: *mut ReadChannelDesc,
    pub fileSpecW: *mut SPPlatformFileSpecificationW,
    pub fileSpecX: *mut XPlatFileSpec,
}
#[test]
fn bindgen_test_layout_ReadImageDocumentDesc() {
    const UNINIT: ::std::mem::MaybeUninit<ReadImageDocumentDesc> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ReadImageDocumentDesc>(),
        944usize,
        concat!("Size of: ", stringify!(ReadImageDocumentDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<ReadImageDocumentDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(ReadImageDocumentDesc))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(minVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxVersion) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(maxVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMode) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(imageMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bounds) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(bounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hResolution) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(hResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vResolution) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(vResolution)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).redLUT) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(redLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).greenLUT) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(greenLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blueLUT) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(blueLUT)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetCompositeChannels) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(targetCompositeChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetTransparency) as usize - ptr as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(targetTransparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetLayerMask) as usize - ptr as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(targetLayerMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mergedCompositeChannels) as usize - ptr as usize },
        832usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(mergedCompositeChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mergedTransparency) as usize - ptr as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(mergedTransparency)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaChannels) as usize - ptr as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(alphaChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).selection) as usize - ptr as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(selection)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileSpec) as usize - ptr as usize },
        864usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(fileSpec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layersDescriptor) as usize - ptr as usize },
        872usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(layersDescriptor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).documentType) as usize - ptr as usize },
        880usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(documentType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        888usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCprofileData) as usize - ptr as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(iCCprofileData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCprofileSize) as usize - ptr as usize },
        904usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(iCCprofileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).compositeChannelCount) as usize - ptr as usize },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(compositeChannelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layerCount) as usize - ptr as usize },
        912usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(layerCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alphaChannelCount) as usize - ptr as usize },
        916usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(alphaChannelCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetSmartFilterMask) as usize - ptr as usize },
        920usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(targetSmartFilterMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileSpecW) as usize - ptr as usize },
        928usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(fileSpecW)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileSpecX) as usize - ptr as usize },
        936usize,
        concat!(
            "Offset of field: ",
            stringify!(ReadImageDocumentDesc),
            "::",
            stringify!(fileSpecX)
        )
    );
}
pub type TestAbortProc = ::std::option::Option<unsafe extern "C" fn() -> Boolean>;
pub type ProgressProc = ::std::option::Option<unsafe extern "C" fn(done: int32, total: int32)>;
pub type HostProc = ::std::option::Option<unsafe extern "C" fn(selector: int16, data: *mut isize)>;
pub type ProcessEventProc =
    ::std::option::Option<unsafe extern "C" fn(event: *mut ::std::os::raw::c_void)>;
pub type DisplayPixelsProc = ::std::option::Option<
    unsafe extern "C" fn(
        source: *const PSPixelMap,
        srcRect: *const VRect,
        dstRow: int32,
        dstCol: int32,
        platformContext: *mut ::std::os::raw::c_void,
    ) -> OSErr,
>;
pub type AdvanceStateProc = ::std::option::Option<unsafe extern "C" fn() -> OSErr>;
pub type ColorServicesProc =
    ::std::option::Option<unsafe extern "C" fn(info: *mut ColorServicesInfo) -> OSErr>;
pub type NewPIHandleProc = ::std::option::Option<unsafe extern "C" fn(size: int32) -> Handle>;
pub type DisposePIHandleProc = ::std::option::Option<unsafe extern "C" fn(h: Handle)>;
pub type DisposeRegularHandlePIHandleProc = ::std::option::Option<unsafe extern "C" fn(h: Handle)>;
pub type GetPIHandleSizeProc = ::std::option::Option<unsafe extern "C" fn(h: Handle) -> int32>;
pub type SetPIHandleSizeProc =
    ::std::option::Option<unsafe extern "C" fn(h: Handle, newSize: int32) -> OSErr>;
pub type LockPIHandleProc =
    ::std::option::Option<unsafe extern "C" fn(h: Handle, moveHigh: Boolean) -> Ptr>;
pub type UnlockPIHandleProc = ::std::option::Option<unsafe extern "C" fn(h: Handle)>;
pub type RecoverSpaceProc = ::std::option::Option<unsafe extern "C" fn(size: int32)>;
pub type AllocateBufferProc =
    ::std::option::Option<unsafe extern "C" fn(size: int32, bufferID: *mut BufferID) -> OSErr>;
pub type AllocateBufferProc64 =
    ::std::option::Option<unsafe extern "C" fn(size: int64, bufferID: *mut BufferID) -> OSErr>;
pub type LockBufferProc =
    ::std::option::Option<unsafe extern "C" fn(bufferID: BufferID, moveHigh: Boolean) -> Ptr>;
pub type UnlockBufferProc = ::std::option::Option<unsafe extern "C" fn(bufferID: BufferID)>;
pub type FreeBufferProc = ::std::option::Option<unsafe extern "C" fn(bufferID: BufferID)>;
pub type BufferSpaceProc = ::std::option::Option<unsafe extern "C" fn() -> int32>;
pub type BufferSpaceProc64 = ::std::option::Option<unsafe extern "C" fn() -> int64>;
pub type ReserveSpaceProc = ::std::option::Option<unsafe extern "C" fn(size: int32) -> OSErr>;
pub type CountPIResourcesProc =
    ::std::option::Option<unsafe extern "C" fn(type_: ResType) -> int16>;
pub type GetPIResourceProc =
    ::std::option::Option<unsafe extern "C" fn(type_: ResType, index: int16) -> Handle>;
pub type DeletePIResourceProc =
    ::std::option::Option<unsafe extern "C" fn(type_: ResType, index: int16)>;
pub type AddPIResourceProc =
    ::std::option::Option<unsafe extern "C" fn(type_: ResType, data: Handle) -> OSErr>;
pub type GetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        signature: PIType,
        key: PIType,
        index: int32,
        simpleProperty: *mut isize,
        complexProperty: *mut Handle,
    ) -> OSErr,
>;
pub type SetPropertyProc = ::std::option::Option<
    unsafe extern "C" fn(
        signature: PIType,
        key: PIType,
        index: int32,
        simpleProperty: isize,
        complexProperty: Handle,
    ) -> OSErr,
>;
pub type PIResampleProc = ::std::option::Option<
    unsafe extern "C" fn(
        source: *mut PSImagePlane,
        destination: *mut PSImagePlane,
        area: *mut Rect,
        coords: *mut Fixed,
        method: int16,
    ) -> OSErr,
>;
pub type PIResampleMultiProc = ::std::option::Option<
    unsafe extern "C" fn(
        source: *mut PSImageMultiPlane,
        destination: *mut PSImageMultiPlane,
        area: *mut Rect,
        coords: *mut Fixed,
        method: int16,
    ) -> OSErr,
>;
pub type PIResampleMulti32Proc = ::std::option::Option<
    unsafe extern "C" fn(
        source: *mut PSImageMultiPlane32,
        destination: *mut PSImageMultiPlane32,
        area: *mut VRect,
        coords: *mut int64,
        method: int16,
    ) -> OSErr,
>;
pub type ReadPixelsProc = ::std::option::Option<
    unsafe extern "C" fn(
        port: ChannelReadPort,
        scaling: *const PSScaling,
        writeRect: *const VRect,
        destination: *const PixelMemoryDesc,
        wroteRect: *mut VRect,
    ) -> OSErr,
>;
pub type WriteBasePixelsProc = ::std::option::Option<
    unsafe extern "C" fn(
        port: ChannelWritePort,
        writeRect: *const VRect,
        source: *const PixelMemoryDesc,
    ) -> OSErr,
>;
pub type ReadPortForWritePortProc = ::std::option::Option<
    unsafe extern "C" fn(readPort: *mut ChannelReadPort, writePort: ChannelWritePort) -> OSErr,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferProcs {
    pub bufferProcsVersion: int16,
    pub numBufferProcs: int16,
    pub allocateProc: AllocateBufferProc,
    pub lockProc: LockBufferProc,
    pub unlockProc: UnlockBufferProc,
    pub freeProc: FreeBufferProc,
    pub spaceProc: BufferSpaceProc,
    pub reserveProc: ReserveSpaceProc,
    pub allocateProc64: AllocateBufferProc64,
    pub spaceProc64: BufferSpaceProc64,
}
#[test]
fn bindgen_test_layout_BufferProcs() {
    const UNINIT: ::std::mem::MaybeUninit<BufferProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BufferProcs>(),
        72usize,
        concat!("Size of: ", stringify!(BufferProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<BufferProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(BufferProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(bufferProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numBufferProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(numBufferProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocateProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(allocateProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(lockProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlockProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(unlockProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).freeProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(freeProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceProc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(spaceProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserveProc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(reserveProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocateProc64) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(allocateProc64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).spaceProc64) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferProcs),
            "::",
            stringify!(spaceProc64)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResourceProcs {
    pub resourceProcsVersion: int16,
    pub numResourceProcs: int16,
    pub countProc: CountPIResourcesProc,
    pub getProc: GetPIResourceProc,
    pub deleteProc: DeletePIResourceProc,
    pub addProc: AddPIResourceProc,
}
#[test]
fn bindgen_test_layout_ResourceProcs() {
    const UNINIT: ::std::mem::MaybeUninit<ResourceProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ResourceProcs>(),
        40usize,
        concat!("Size of: ", stringify!(ResourceProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<ResourceProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(ResourceProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(resourceProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numResourceProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(numResourceProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).countProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(countProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(getProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).deleteProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(deleteProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).addProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ResourceProcs),
            "::",
            stringify!(addProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandleProcs {
    pub handleProcsVersion: int16,
    pub numHandleProcs: int16,
    pub newProc: NewPIHandleProc,
    pub disposeProc: DisposePIHandleProc,
    pub getSizeProc: GetPIHandleSizeProc,
    pub setSizeProc: SetPIHandleSizeProc,
    pub lockProc: LockPIHandleProc,
    pub unlockProc: UnlockPIHandleProc,
    pub recoverSpaceProc: RecoverSpaceProc,
    pub disposeRegularHandleProc: DisposeRegularHandlePIHandleProc,
}
#[test]
fn bindgen_test_layout_HandleProcs() {
    const UNINIT: ::std::mem::MaybeUninit<HandleProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<HandleProcs>(),
        72usize,
        concat!("Size of: ", stringify!(HandleProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<HandleProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(HandleProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(handleProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numHandleProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(numHandleProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(newProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disposeProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(disposeProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getSizeProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(getSizeProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setSizeProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(setSizeProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lockProc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(lockProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlockProc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(unlockProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).recoverSpaceProc) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(recoverSpaceProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).disposeRegularHandleProc) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(HandleProcs),
            "::",
            stringify!(disposeRegularHandleProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImageServicesProcs {
    pub imageServicesProcsVersion: int16,
    pub numImageServicesProcs: int16,
    pub interpolate1DProc: PIResampleProc,
    pub interpolate2DProc: PIResampleProc,
    pub interpolate1DMultiProc: PIResampleMultiProc,
    pub interpolate2DMultiProc: PIResampleMultiProc,
    pub interpolate1DMulti32Proc: PIResampleMulti32Proc,
    pub interpolate2DMulti32Proc: PIResampleMulti32Proc,
}
#[test]
fn bindgen_test_layout_ImageServicesProcs() {
    const UNINIT: ::std::mem::MaybeUninit<ImageServicesProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImageServicesProcs>(),
        56usize,
        concat!("Size of: ", stringify!(ImageServicesProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImageServicesProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(ImageServicesProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageServicesProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(imageServicesProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numImageServicesProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(numImageServicesProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate1DProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate1DProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate2DProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate2DProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate1DMultiProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate1DMultiProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate2DMultiProc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate2DMultiProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate1DMulti32Proc) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate1DMulti32Proc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).interpolate2DMulti32Proc) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImageServicesProcs),
            "::",
            stringify!(interpolate2DMulti32Proc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PropertyProcs {
    pub propertyProcsVersion: int16,
    pub numPropertyProcs: int16,
    pub getPropertyProc: GetPropertyProc,
    pub setPropertyProc: SetPropertyProc,
}
#[test]
fn bindgen_test_layout_PropertyProcs() {
    const UNINIT: ::std::mem::MaybeUninit<PropertyProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PropertyProcs>(),
        24usize,
        concat!("Size of: ", stringify!(PropertyProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<PropertyProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(PropertyProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyProcs),
            "::",
            stringify!(propertyProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numPropertyProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyProcs),
            "::",
            stringify!(numPropertyProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPropertyProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyProcs),
            "::",
            stringify!(getPropertyProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setPropertyProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PropertyProcs),
            "::",
            stringify!(setPropertyProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ChannelPortProcs {
    pub channelPortProcsVersion: int16,
    pub numChannelPortProcs: int16,
    pub readPixelsProc: ReadPixelsProc,
    pub writeBasePixelsProc: WriteBasePixelsProc,
    pub readPortForWritePortProc: ReadPortForWritePortProc,
}
#[test]
fn bindgen_test_layout_ChannelPortProcs() {
    const UNINIT: ::std::mem::MaybeUninit<ChannelPortProcs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ChannelPortProcs>(),
        32usize,
        concat!("Size of: ", stringify!(ChannelPortProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<ChannelPortProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(ChannelPortProcs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelPortProcsVersion) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelPortProcs),
            "::",
            stringify!(channelPortProcsVersion)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numChannelPortProcs) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelPortProcs),
            "::",
            stringify!(numChannelPortProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readPixelsProc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelPortProcs),
            "::",
            stringify!(readPixelsProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writeBasePixelsProc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelPortProcs),
            "::",
            stringify!(writeBasePixelsProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readPortForWritePortProc) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ChannelPortProcs),
            "::",
            stringify!(readPortForWritePortProc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSRGBColor {
    pub red: uint16,
    pub green: uint16,
    pub blue: uint16,
}
#[test]
fn bindgen_test_layout_PSRGBColor() {
    const UNINIT: ::std::mem::MaybeUninit<PSRGBColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<PSRGBColor>(),
        6usize,
        concat!("Size of: ", stringify!(PSRGBColor))
    );
    assert_eq!(
        ::std::mem::align_of::<PSRGBColor>(),
        2usize,
        concat!("Alignment of ", stringify!(PSRGBColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).red) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PSRGBColor),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).green) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(PSRGBColor),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blue) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(PSRGBColor),
            "::",
            stringify!(blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPBasicSuite {
    pub AcquireSuite: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            version: int32,
            suite: *mut *const ::std::os::raw::c_void,
        ) -> SPErr,
    >,
    pub ReleaseSuite: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char, version: int32) -> SPErr,
    >,
    pub IsEqual: ::std::option::Option<
        unsafe extern "C" fn(
            token1: *const ::std::os::raw::c_char,
            token2: *const ::std::os::raw::c_char,
        ) -> SPBoolean,
    >,
    pub AllocateBlock: ::std::option::Option<
        unsafe extern "C" fn(size: usize, block: *mut *mut ::std::os::raw::c_void) -> SPErr,
    >,
    pub FreeBlock:
        ::std::option::Option<unsafe extern "C" fn(block: *mut ::std::os::raw::c_void) -> SPErr>,
    pub ReallocateBlock: ::std::option::Option<
        unsafe extern "C" fn(
            block: *mut ::std::os::raw::c_void,
            newSize: usize,
            newblock: *mut *mut ::std::os::raw::c_void,
        ) -> SPErr,
    >,
    pub Undefined: ::std::option::Option<unsafe extern "C" fn() -> SPErr>,
}
#[test]
fn bindgen_test_layout_SPBasicSuite() {
    const UNINIT: ::std::mem::MaybeUninit<SPBasicSuite> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SPBasicSuite>(),
        56usize,
        concat!("Size of: ", stringify!(SPBasicSuite))
    );
    assert_eq!(
        ::std::mem::align_of::<SPBasicSuite>(),
        8usize,
        concat!("Alignment of ", stringify!(SPBasicSuite))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AcquireSuite) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(AcquireSuite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReleaseSuite) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(ReleaseSuite)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).IsEqual) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(IsEqual)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AllocateBlock) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(AllocateBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeBlock) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(FreeBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ReallocateBlock) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(ReallocateBlock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Undefined) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SPBasicSuite),
            "::",
            stringify!(Undefined)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FilterCaseInfo {
    pub inputHandling: ::std::os::raw::c_char,
    pub outputHandling: ::std::os::raw::c_char,
    pub flags1: ::std::os::raw::c_char,
    pub flags2: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_FilterCaseInfo() {
    const UNINIT: ::std::mem::MaybeUninit<FilterCaseInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FilterCaseInfo>(),
        4usize,
        concat!("Size of: ", stringify!(FilterCaseInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<FilterCaseInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(FilterCaseInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputHandling) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterCaseInfo),
            "::",
            stringify!(inputHandling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputHandling) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterCaseInfo),
            "::",
            stringify!(outputHandling)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags1) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterCaseInfo),
            "::",
            stringify!(flags1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags2) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterCaseInfo),
            "::",
            stringify!(flags2)
        )
    );
}
pub type FilterColor = [::std::os::raw::c_uchar; 4usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BigDocumentStruct {
    pub PluginUsing32BitCoordinates: int32,
    pub imageSize32: VPoint,
    pub filterRect32: VRect,
    pub inRect32: VRect,
    pub outRect32: VRect,
    pub maskRect32: VRect,
    pub floatCoord32: VPoint,
    pub wholeSize32: VPoint,
}
#[test]
fn bindgen_test_layout_BigDocumentStruct() {
    const UNINIT: ::std::mem::MaybeUninit<BigDocumentStruct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<BigDocumentStruct>(),
        92usize,
        concat!("Size of: ", stringify!(BigDocumentStruct))
    );
    assert_eq!(
        ::std::mem::align_of::<BigDocumentStruct>(),
        4usize,
        concat!("Alignment of ", stringify!(BigDocumentStruct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PluginUsing32BitCoordinates) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(PluginUsing32BitCoordinates)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSize32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(imageSize32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterRect32) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(filterRect32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inRect32) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(inRect32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outRect32) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(outRect32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskRect32) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(maskRect32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatCoord32) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(floatCoord32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wholeSize32) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(BigDocumentStruct),
            "::",
            stringify!(wholeSize32)
        )
    );
}
#[repr(C, packed(4))]
#[derive(Debug, Copy, Clone)]
pub struct FilterRecord {
    pub serialNumber: int32,
    pub abortProc: TestAbortProc,
    pub progressProc: ProgressProc,
    pub parameters: Handle,
    pub imageSize: Point,
    pub planes: int16,
    pub filterRect: Rect,
    pub background: PSRGBColor,
    pub foreground: PSRGBColor,
    pub maxSpace: int32,
    pub bufferSpace: int32,
    pub inRect: Rect,
    pub inLoPlane: int16,
    pub inHiPlane: int16,
    pub outRect: Rect,
    pub outLoPlane: int16,
    pub outHiPlane: int16,
    pub inData: *mut ::std::os::raw::c_void,
    pub inRowBytes: int32,
    pub outData: *mut ::std::os::raw::c_void,
    pub outRowBytes: int32,
    pub isFloating: Boolean,
    pub haveMask: Boolean,
    pub autoMask: Boolean,
    pub maskRect: Rect,
    pub maskData: *mut ::std::os::raw::c_void,
    pub maskRowBytes: int32,
    pub backColor: FilterColor,
    pub foreColor: FilterColor,
    pub hostSig: OSType,
    pub hostProc: HostProc,
    pub imageMode: int16,
    pub imageHRes: Fixed,
    pub imageVRes: Fixed,
    pub floatCoord: Point,
    pub wholeSize: Point,
    pub monitor: PlugInMonitor,
    pub platformData: *mut ::std::os::raw::c_void,
    pub bufferProcs: *mut BufferProcs,
    pub resourceProcs: *mut ResourceProcs,
    pub processEvent: ProcessEventProc,
    pub displayPixels: DisplayPixelsProc,
    pub handleProcs: *mut HandleProcs,
    pub supportsDummyChannels: Boolean,
    pub supportsAlternateLayouts: Boolean,
    pub wantLayout: int16,
    pub filterCase: int16,
    pub dummyPlaneValue: int16,
    pub premiereHook: *mut ::std::os::raw::c_void,
    pub advanceState: AdvanceStateProc,
    pub supportsAbsolute: Boolean,
    pub wantsAbsolute: Boolean,
    pub getPropertyObsolete: GetPropertyProc,
    pub cannotUndo: Boolean,
    pub supportsPadding: Boolean,
    pub inputPadding: int16,
    pub outputPadding: int16,
    pub maskPadding: int16,
    pub samplingSupport: ::std::os::raw::c_char,
    pub reservedByte: ::std::os::raw::c_char,
    pub inputRate: Fixed,
    pub maskRate: Fixed,
    pub colorServices: ColorServicesProc,
    pub inLayerPlanes: int16,
    pub inTransparencyMask: int16,
    pub inLayerMasks: int16,
    pub inInvertedLayerMasks: int16,
    pub inNonLayerPlanes: int16,
    pub outLayerPlanes: int16,
    pub outTransparencyMask: int16,
    pub outLayerMasks: int16,
    pub outInvertedLayerMasks: int16,
    pub outNonLayerPlanes: int16,
    pub absLayerPlanes: int16,
    pub absTransparencyMask: int16,
    pub absLayerMasks: int16,
    pub absInvertedLayerMasks: int16,
    pub absNonLayerPlanes: int16,
    pub inPreDummyPlanes: int16,
    pub inPostDummyPlanes: int16,
    pub outPreDummyPlanes: int16,
    pub outPostDummyPlanes: int16,
    pub inColumnBytes: int32,
    pub inPlaneBytes: int32,
    pub outColumnBytes: int32,
    pub outPlaneBytes: int32,
    pub imageServicesProcs: *mut ImageServicesProcs,
    pub propertyProcs: *mut PropertyProcs,
    pub inTileHeight: int16,
    pub inTileWidth: int16,
    pub inTileOrigin: Point,
    pub absTileHeight: int16,
    pub absTileWidth: int16,
    pub absTileOrigin: Point,
    pub outTileHeight: int16,
    pub outTileWidth: int16,
    pub outTileOrigin: Point,
    pub maskTileHeight: int16,
    pub maskTileWidth: int16,
    pub maskTileOrigin: Point,
    pub descriptorParameters: *mut PIDescriptorParameters,
    pub errorString: *mut Str255,
    pub channelPortProcs: *mut ChannelPortProcs,
    pub documentInfo: *mut ReadImageDocumentDesc,
    pub sSPBasic: *mut SPBasicSuite,
    pub plugInRef: *mut ::std::os::raw::c_void,
    pub depth: int32,
    pub iCCprofileData: Handle,
    pub iCCprofileSize: int32,
    pub canUseICCProfiles: int32,
    pub hasImageScrap: int32,
    pub bigDocumentData: *mut BigDocumentStruct,
    pub input3DScene: *mut PIDescriptorParameters,
    pub output3DScene: *mut PIDescriptorParameters,
    pub createNewLayer: Boolean,
    pub iCCWorkingProfileData: Handle,
    pub iCCWorkingProfileSize: int32,
    pub bufferSpace64: int64,
    pub maxSpace64: int64,
    pub reserved: [::std::os::raw::c_char; 46usize],
}
#[test]
fn bindgen_test_layout_FilterRecord() {
    const UNINIT: ::std::mem::MaybeUninit<FilterRecord> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<FilterRecord>(),
        608usize,
        concat!("Size of: ", stringify!(FilterRecord))
    );
    assert_eq!(
        ::std::mem::align_of::<FilterRecord>(),
        4usize,
        concat!("Alignment of ", stringify!(FilterRecord))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).serialNumber) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(serialNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abortProc) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(abortProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progressProc) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(progressProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameters) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(parameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(imageSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).planes) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(planes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterRect) as usize - ptr as usize },
        34usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(filterRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).background) as usize - ptr as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foreground) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(foreground)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSpace) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maxSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSpace) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(bufferSpace)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inRect) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inLoPlane) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inLoPlane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inHiPlane) as usize - ptr as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inHiPlane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outRect) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outLoPlane) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outLoPlane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outHiPlane) as usize - ptr as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outHiPlane)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inData) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inRowBytes) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inRowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outData) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outRowBytes) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outRowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).isFloating) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(isFloating)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).haveMask) as usize - ptr as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(haveMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).autoMask) as usize - ptr as usize },
        114usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(autoMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskRect) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskData) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskRowBytes) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskRowBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backColor) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(backColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).foreColor) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(foreColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostSig) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(hostSig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostProc) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(hostProc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageMode) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(imageMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageHRes) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(imageHRes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageVRes) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(imageVRes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatCoord) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(floatCoord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wholeSize) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(wholeSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).monitor) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(monitor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).platformData) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(platformData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferProcs) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(bufferProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).resourceProcs) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(resourceProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).processEvent) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(processEvent)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayPixels) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(displayPixels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handleProcs) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(handleProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsDummyChannels) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(supportsDummyChannels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsAlternateLayouts) as usize - ptr as usize },
        265usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(supportsAlternateLayouts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wantLayout) as usize - ptr as usize },
        266usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(wantLayout)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filterCase) as usize - ptr as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(filterCase)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dummyPlaneValue) as usize - ptr as usize },
        270usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(dummyPlaneValue)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).premiereHook) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(premiereHook)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).advanceState) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(advanceState)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsAbsolute) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(supportsAbsolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wantsAbsolute) as usize - ptr as usize },
        289usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(wantsAbsolute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getPropertyObsolete) as usize - ptr as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(getPropertyObsolete)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cannotUndo) as usize - ptr as usize },
        300usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(cannotUndo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).supportsPadding) as usize - ptr as usize },
        301usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(supportsPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputPadding) as usize - ptr as usize },
        302usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inputPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputPadding) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outputPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskPadding) as usize - ptr as usize },
        306usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).samplingSupport) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(samplingSupport)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reservedByte) as usize - ptr as usize },
        309usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(reservedByte)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inputRate) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inputRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskRate) as usize - ptr as usize },
        316usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskRate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorServices) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(colorServices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inLayerPlanes) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTransparencyMask) as usize - ptr as usize },
        330usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inTransparencyMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inLayerMasks) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inInvertedLayerMasks) as usize - ptr as usize },
        334usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inInvertedLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inNonLayerPlanes) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inNonLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outLayerPlanes) as usize - ptr as usize },
        338usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outTransparencyMask) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outTransparencyMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outLayerMasks) as usize - ptr as usize },
        342usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outInvertedLayerMasks) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outInvertedLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outNonLayerPlanes) as usize - ptr as usize },
        346usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outNonLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absLayerPlanes) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absTransparencyMask) as usize - ptr as usize },
        350usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absTransparencyMask)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absLayerMasks) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absInvertedLayerMasks) as usize - ptr as usize },
        354usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absInvertedLayerMasks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absNonLayerPlanes) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absNonLayerPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inPreDummyPlanes) as usize - ptr as usize },
        358usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inPreDummyPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inPostDummyPlanes) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inPostDummyPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outPreDummyPlanes) as usize - ptr as usize },
        362usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outPreDummyPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outPostDummyPlanes) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outPostDummyPlanes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inColumnBytes) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inColumnBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inPlaneBytes) as usize - ptr as usize },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inPlaneBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outColumnBytes) as usize - ptr as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outColumnBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outPlaneBytes) as usize - ptr as usize },
        380usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outPlaneBytes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageServicesProcs) as usize - ptr as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(imageServicesProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).propertyProcs) as usize - ptr as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(propertyProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTileHeight) as usize - ptr as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inTileHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTileWidth) as usize - ptr as usize },
        402usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inTileWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).inTileOrigin) as usize - ptr as usize },
        404usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(inTileOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absTileHeight) as usize - ptr as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absTileHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absTileWidth) as usize - ptr as usize },
        410usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absTileWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absTileOrigin) as usize - ptr as usize },
        412usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(absTileOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outTileHeight) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outTileHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outTileWidth) as usize - ptr as usize },
        418usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outTileWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outTileOrigin) as usize - ptr as usize },
        420usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(outTileOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskTileHeight) as usize - ptr as usize },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskTileHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskTileWidth) as usize - ptr as usize },
        426usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskTileWidth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maskTileOrigin) as usize - ptr as usize },
        428usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maskTileOrigin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).descriptorParameters) as usize - ptr as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(descriptorParameters)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).errorString) as usize - ptr as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(errorString)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).channelPortProcs) as usize - ptr as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(channelPortProcs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).documentInfo) as usize - ptr as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(documentInfo)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sSPBasic) as usize - ptr as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(sSPBasic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).plugInRef) as usize - ptr as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(plugInRef)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depth) as usize - ptr as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCprofileData) as usize - ptr as usize },
        484usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(iCCprofileData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCprofileSize) as usize - ptr as usize },
        492usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(iCCprofileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).canUseICCProfiles) as usize - ptr as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(canUseICCProfiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hasImageScrap) as usize - ptr as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(hasImageScrap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bigDocumentData) as usize - ptr as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(bigDocumentData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).input3DScene) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(input3DScene)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output3DScene) as usize - ptr as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(output3DScene)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).createNewLayer) as usize - ptr as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(createNewLayer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCWorkingProfileData) as usize - ptr as usize },
        532usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(iCCWorkingProfileData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iCCWorkingProfileSize) as usize - ptr as usize },
        540usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(iCCWorkingProfileSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferSpace64) as usize - ptr as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(bufferSpace64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).maxSpace64) as usize - ptr as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(maxSpace64)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(FilterRecord),
            "::",
            stringify!(reserved)
        )
    );
}
pub type FilterRecordPtr = *mut FilterRecord;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SPPlatformFileSpecification_t {
    pub _address: u8,
}
